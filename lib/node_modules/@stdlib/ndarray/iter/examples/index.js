/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var objectKeys = require( '@stdlib/utils/keys' );
var ndarray = require( '@stdlib/ndarray/ctor' );
var array = require( '@stdlib/ndarray/array' );
var iter = require( '@stdlib/ndarray/iter' );
var ns = require( './../lib' );

// Example: Get an array consisting of keys/properties inside ns.
console.log( objectKeys( ns ) );

// Example: Iterate over [index, column] pairs for each column in a matrix
var array2D = [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ];
var data = [].concat.apply( [], array2D );
var x = ndarray( 'generic', data, [ 3, 3 ], [ 3, 1 ], 0, 'row-major' );
var iterEntries = ns.nditerEntries( x );
var entry;

for ( entry of iterEntries ) {
	console.log( 'Index:', entry[ 0 ], 'Value:', entry[ 1 ] );
}

// Example: Iterate over each row of the ndarray
var iterRows = ns.nditerRows( x );
var row;
var i;
var rowData;

while ( true ) {
	row = iterRows.next();
	if ( row.done ) {
		break;
	}
	rowData = [];
	for ( i = 0; i < row.value.shape[ 0 ]; i++ ) {
		rowData.push( row.value.get( i ) );
	}
	console.log( rowData );
}

// Example: Iterate over each column of the ndarray
var iterColumns = ns.nditerColumns( x );
var column;
var k;
var columnData;

while ( true ) {
	column = iterColumns.next();
	if ( column.done ) {
		break;
	}
	columnData = [];
	for ( k = 0; k < column.value.shape[ 0 ]; k++ ) {
		columnData.push( column.value.get( k ) );
	}
	console.log( columnData );
}

// Example: Iterate over each matrix in the stack
var matricesData = [
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8
];
var dataMatrix = ndarray( 'generic', matricesData, [ 2, 2, 2 ], [ 4, 2, 1 ], 0, 'row-major' );
var iterMatrices = ns.nditerMatrices( dataMatrix );
var matrix;
var rowIndex;
var j;
var matrixData;
var currentRow;

while ( true ) {
	matrix = iterMatrices.next();
	if ( matrix.done ) {
		break;
	}
	matrixData = [];
	for ( rowIndex = 0; rowIndex < matrix.value.shape[ 0 ]; rowIndex++ ) {
		currentRow = [];
		for ( j = 0; j < matrix.value.shape[ 1 ]; j++ ) {
			currentRow.push( matrix.value.get( rowIndex, j ) );
		}
		matrixData.push( currentRow );
	}
	console.log( matrixData );
}

// Example: Converting each iterated ndarray to a generic array
var ndMatrix;
ndMatrix = array( data, {
	'shape': [ 3, 3 ],
	'dtype': 'generic'
} );
var rowIterator;
rowIterator = iter.nditerRows( ndMatrix );
var it = iter.nditer2arrayEach( rowIterator );
var v;

console.log( 'Original ndarray:', ndMatrix.toString() );

while ( true ) {
	v = it.next();
	if ( v.done ) {
		break;
	}
	console.log( v.value );
}
